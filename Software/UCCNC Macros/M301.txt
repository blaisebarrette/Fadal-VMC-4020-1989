/********************************************/
/*          Get modus from slave 1          */
/*          ESP32 in control panel          */
/********************************************/
    ushort[] Slave_Master_array = new ushort[9];
    exec.GetModbusregisters(50, 9, out Slave_Master_array);
    ushort _MPG_Axis_Select = Slave_Master_array[0]; // 50
    ushort _MPG_Multiplication = Slave_Master_array[1]; // 51
    ushort _Tool_Select_Switch = Slave_Master_array[2]; // 52 (Unused)
    ushort _Tool_Select = Slave_Master_array[3]; // 53
    ushort _Spindle_Speed_Override_Switch = Slave_Master_array[4]; // 54 (Unused)
    ushort _Spindle_Speed_Override = Slave_Master_array[5]; // 55
    ushort _FeedOverride_Switch = Slave_Master_array[6]; // 56 (Unused)
    ushort _Feed_Override = Slave_Master_array[7]; // 57
    ushort _ActivateToolChange = Slave_Master_array[8]; // 58

/********************************************/
/*           Send modus to slave 1          */
/*          ESP32 in control panel          */
/********************************************/
    //---- LED ----//
        // Probe Tool LED
        exec.SetModbusregister(0, 0);

        // Table Front LED
        //exec.SetModbusregister(1, 0); // Handled in macro M200 (Go to park position 1)

        // Home Machine LED
        if(AS3.GetLED(23) == true){
            exec.SetModbusregister(2, 1);
        }else{
            exec.SetModbusregister(2, 0);
        }

        // Reset LED
        if(AS3.GetLED(25) == true){ 
            exec.SetModbusregister(3, 1);
            
        }else{
            exec.SetModbusregister(3, 0);
        }

        // Spindle ON/OFF LED
        if(AS3.GetLED(50) == true || AS3.GetLED(51) == true){
            exec.SetModbusregister(4, 1);
        }else{
            exec.SetModbusregister(4, 0);
        }

        // Coolant ON/OFF LED
        if(AS3.GetLED(53) == true){
            exec.SetModbusregister(5, 1);
        }else{
            exec.SetModbusregister(5, 0);
        }

        // Mist ON/OFF LED
        if(AS3.GetLED(52) == true){
            exec.SetModbusregister(6, 1);
        }else{
            exec.SetModbusregister(6, 0);
        }

        // Chip Auger ON/OFF LED
        if(AS3.GetLED(71) == true){
            exec.SetModbusregister(7, 1);
        }else{
            exec.SetModbusregister(7, 0);
        }
        
        // Optional Stop LED
        if(AS3.Getbuttonstate(561) == true){
            exec.SetModbusregister(8, 1);
        }else{
            exec.SetModbusregister(8, 0);
        }

        // Single Line LED
        if(AS3.GetLED(55) == true){
            exec.SetModbusregister(9, 1);
        }else{
            exec.SetModbusregister(9, 0);
        }

        // Lights ON/OFF LED
        if(AS3.GetLED(73) == true){
            exec.SetModbusregister(10, 1);
        }else{
            exec.SetModbusregister(10, 0);
        }
        
        

    //---- MPG state ----//
        ushort HardMPG = 0;
        if(AS3jog.Getbuttonstate(161) == true || AS3jog.Getbuttonstate(162) == true || exec.IsMoving()){
            HardMPG = 0;
        }else{
            HardMPG = 1;
        }

        if((AS3.GetLED(137) == false || AS3.GetLED(138) == false) && (AS3jog.Getbuttonstate(226) != true && AS3jog.Getbuttonstate(227) != true) && (AS3.GetLED(23) != true)){ // Watch MPG LED in "Diagnostic" page
            exec.Callbutton(228); // Acivate "MPG Multi" Button
        }

        if(HardMPG == 1){
            exec.SetModbusregister(11, 1);
        }else{
            exec.SetModbusregister(11, 0);
        }

    //---- Is Moving ----//
        // IsMoving Watchdog
        if(exec.IsMoving()){
            exec.SetModbusregister(12, 1);
        }else{
            exec.SetModbusregister(12, 0);
        }

    //---- Tool select ----//
        /*string ToolTemp1 = AS3.Getfield(2652);
        string ToolTemp2 = ToolTemp1.Substring(0, ToolTemp1.Length-1);
        ushort ToolSelectInUCCNCField = Convert.ToUInt16(ToolTemp2);

        if(ToolSelectInUCCNCField != _Tool_Select){
            AS3.Setfield(_Tool_Select,2652);
            AS3.Validatefield(2652);
        }

        if(_Tool_Select_Switch == 1){
            exec.Callbutton(783); // Click the tool change button
        }*/

    //---- Spindle Speed Override ----//

        string S_SpindleSpeedOverideInUCCNCField = AS3.Getfield(233);
        S_SpindleSpeedOverideInUCCNCField = S_SpindleSpeedOverideInUCCNCField.Substring(0, S_SpindleSpeedOverideInUCCNCField.Length-1);
        ushort SpindleSpeedOverideInUCCNCField = Convert.ToUInt16(S_SpindleSpeedOverideInUCCNCField);
        string S_CurrentPulley = AS3.Getfield(2013);
        ushort CurrentPulley = Convert.ToUInt16(S_CurrentPulley);
        exec.SetModbusregister(16, CurrentPulley);
        float SpindleDemmandedSpeed = float.Parse(AS3.Getfield(869));
        exec.SetModbusregister(17, Convert.ToUInt16(SpindleDemmandedSpeed));
        bool SSOalteredFromUCCNC = false;

        if(AS3.Getbutton(134) || AS3.Getbutton(135) || AS3.Getbutton(558)){
            if((CurrentPulley == 1 && SpindleDemmandedSpeed < 2500) || (CurrentPulley == 2 && (SpindleDemmandedSpeed > 2500))){
                exec.SetModbusregister(14, SpindleSpeedOverideInUCCNCField);
                SSOalteredFromUCCNC = true;
                ushort SSOWaitForUpdate = 0;
                while(SSOWaitForUpdate != SpindleSpeedOverideInUCCNCField){
                    exec.GetModbusregister(55, out SSOWaitForUpdate);
                }
            }
        }

        if(_Spindle_Speed_Override != SpindleSpeedOverideInUCCNCField && !SSOalteredFromUCCNC){
            AS3.Setfield(_Spindle_Speed_Override,233);
            AS3.Validatefield(233);
        }

    //---- Feed Override ----//
        string S_FeedOverideInUCCNCField = AS3.Getfield(232);
        S_FeedOverideInUCCNCField = S_FeedOverideInUCCNCField.Substring(0, S_FeedOverideInUCCNCField.Length-1);
        ushort FeedOverideInUCCNCField = Convert.ToUInt16(S_FeedOverideInUCCNCField);
        bool FROalteredFromUCCNC = false;
        
        if(AS3.Getbutton(132) || AS3.Getbutton(133) || AS3.Getbutton(557)){
            exec.SetModbusregister(15, FeedOverideInUCCNCField);
            FROalteredFromUCCNC = true;
            ushort FROWaitForUpdate = 0;
            while(FROWaitForUpdate != FeedOverideInUCCNCField){
                exec.GetModbusregister(57, out FROWaitForUpdate);
            }
        }

        if(_Feed_Override != FeedOverideInUCCNCField && !FROalteredFromUCCNC){ // Negative direction
            AS3.Setfield(_Feed_Override,232);
            AS3.Validatefield(232);
        }

    //---- Axis and scale select ----//
        if(HardMPG == 1){ // If Hard MPG is selected
            if(_MPG_Axis_Select == 1){exec.Callbutton(220);}
            if(_MPG_Axis_Select == 2){exec.Callbutton(221);}
            if(_MPG_Axis_Select == 3){exec.Callbutton(222);}
            if(_MPG_Axis_Select == 4){exec.Callbutton(225);}
            if(_MPG_Multiplication == 1){exec.Callbutton(20000);}
            if(_MPG_Multiplication == 2){exec.Callbutton(241);}
            if(_MPG_Multiplication == 3){exec.Callbutton(164);}
            if(_MPG_Multiplication == 4){exec.Callbutton(165);}
        }
    
    //---- Set Jog settings to "MPG MULTI" on jog weel activity ----//
        if((AS3jog.Getbuttonstate(241) == true) || (AS3jog.Getbuttonstate(164) == true) || (AS3jog.Getbuttonstate(165) == true)){AS3jog.Switchbutton(false, 20000);}

    //---- Actions on spindle buttons activity ----//
        /*if(AS3.Getbutton(114)){
            exec.Wait(100);
            if(AS3.GetLED(50)){
                exec.Code("M3");
            }else{
                exec.Code("M5");
            }
        }
        if(AS3.Getbutton(115)){
            exec.Wait(100);
            if(AS3.GetLED(51)){
                exec.Code("M4");
            }else{
                exec.Code("M5");
            }
        }*/