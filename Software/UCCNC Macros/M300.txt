/********************************************/
/*    Persistent variables declared here    */
/********************************************/


    //while(loop) {
/********************************************/
/*          Get modus from slaves           */
/********************************************/
    ushort[] Slave_Master_array = new ushort[9];
    exec.GetModbusregisters(50, 9, out Slave_Master_array);
    ushort _MPG_Axis_Select = Slave_Master_array[0]; // 50
    ushort _MPG_Multiplication = Slave_Master_array[1]; // 51
    ushort _Tool_Select_Step = Slave_Master_array[2]; // 52 (Unused)
    ushort _Tool_Select_Dir = Slave_Master_array[3]; // 53
    ushort _Spindle_Speed_Override_Step = Slave_Master_array[4]; // 54 (Unused)
    ushort _Spindle_Speed_Override_Dir = Slave_Master_array[5]; // 55
    ushort _FeedOverride_Step = Slave_Master_array[6]; // 56 (Unused)
    ushort _Feed_Override_dir = Slave_Master_array[7]; // 57
    ushort _ActivateToolChange = Slave_Master_array[8]; // 58

/********************************************/
/*           Send modus to slaves           */
/********************************************/
    //---- LED ----//
        // Probe Tool LED
        exec.SetModbusregister(0, 0);

        // Table Front LED
        //exec.SetModbusregister(1, 0); // Handled in macro M200 (Go to park position 1)

        // Home Machine LED
        if(AS3.GetLED(23) == true){
            exec.SetModbusregister(2, 1);
        }else{
            exec.SetModbusregister(2, 0);
        }

        // Reset LED
        if(AS3.GetLED(25) == true){ 
            exec.SetModbusregister(3, 1);
        }else{
            exec.SetModbusregister(3, 0);
        }

        // Spindle ON/OFF LED
        if(AS3.GetLED(50) == true || AS3.GetLED(51) == true){
            exec.SetModbusregister(4, 1);
        }else{
            exec.SetModbusregister(4, 0);
        }

        // Coolant ON/OFF LED
        if(AS3.GetLED(53) == true){
            exec.SetModbusregister(5, 1);
        }else{
            exec.SetModbusregister(5, 0);
        }

        // Mist ON/OFF LED
        if(AS3.GetLED(52) == true){
            exec.SetModbusregister(6, 1);
        }else{
            exec.SetModbusregister(6, 0);
        }

        // Chip Auger ON/OFF LED
        exec.SetModbusregister(7, 0);
        
        // Optional Stop LED
        if(AS3.Getbuttonstate(561) == true){
            exec.SetModbusregister(8, 1);
        }else{
            exec.SetModbusregister(8, 0);
        }

        // Single Line LED
        if(AS3.GetLED(55) == true){
            exec.SetModbusregister(9, 1);
        }else{
            exec.SetModbusregister(9, 0);
        }

        // Lights ON/OFF LED
        exec.SetModbusregister(10, 0);
        

    //---- MPG state ----//
        ushort HardMPG = 0;
        if(AS3jog.Getbuttonstate(161) == true || AS3jog.Getbuttonstate(162) == true || exec.IsMoving()){
            HardMPG = 0;
        }else{
            HardMPG = 1;
        }

        if((AS3.GetLED(137) == false || AS3.GetLED(138) == false) && (AS3jog.Getbuttonstate(226) != true && AS3jog.Getbuttonstate(227) != true) && (AS3.GetLED(23) != true)){ // Watch MPG LED in "Diagnostic" page
            exec.Callbutton(228); // Acivate "MPG Multi" Button
        }

        if(HardMPG == 1){
            exec.SetModbusregister(11, 1);
        }else{
            exec.SetModbusregister(11, 0);
        }

    //---- Is Moving ----//
        // IsMoving Watchdog
        if(exec.IsMoving()){
            exec.SetModbusregister(12, 1);
        }else{
            exec.SetModbusregister(12, 0);
        }

    //---- Tool select ----//
        string ToolTemp1 = AS3.Getfield(2652);
        string ToolTemp2 = ToolTemp1.Substring(0, ToolTemp1.Length-1);
        ushort ToolSelectInUCCNCField = Convert.ToUInt16(ToolTemp2);
        bool ToolSelectChanged = false;

        if(_Tool_Select_Dir == 1){ // Negative direction
            AS3.Setfield((ToolSelectInUCCNCField - 10),2652); // Remove ten to current field value
            AS3.Validatefield(2652); // Validate entry
            ToolSelectChanged = true;
        }

        if(_Tool_Select_Dir == 2){ // Positive direction
            AS3.Setfield((ToolSelectInUCCNCField + 10),2652); // Adding ten to current field value
            AS3.Validatefield(2652); // Validate entry
            ToolSelectChanged = true;
        }

        if(_Tool_Select_Dir == 3){ // Encoder button clicked
            exec.Callbutton(783); // Call the toolchage button
            ToolSelectChanged = true;
        }

        if(ToolSelectChanged){
            exec.SetModbusregister(53, 0); // Job's done!
            ToolSelectChanged = false;
        }

    //---- Spindle Speed Override ----//
        string Spindle1 = AS3.Getfield(233);
        string Spindle2 = Spindle1.Substring(0, Spindle1.Length-1);
        ushort SpindleSpeedOverideInUCCNCField = Convert.ToUInt16(Spindle2);
        bool SpindleSpeedOverrideChanged = false;

        if(_Spindle_Speed_Override_Dir == 1){ // Negative direction
            AS3.Setfield((SpindleSpeedOverideInUCCNCField - 10),233); // Remove ten to current field value
            AS3.Validatefield(233); // Validate entry
            SpindleSpeedOverrideChanged = true;
        }

        if(_Spindle_Speed_Override_Dir == 2){ // Positive direction
            AS3.Setfield((SpindleSpeedOverideInUCCNCField + 10),233); // Remove ten to current field value
            AS3.Validatefield(233); // Validate entry
            SpindleSpeedOverrideChanged = true;
        }

        if(_Spindle_Speed_Override_Dir == 3){ // Encoder button clicked
            AS3.Setfield(100,233); // Set Spindle Speed Override to 100%
            AS3.Validatefield(233); // Validate entry
            SpindleSpeedOverrideChanged = true;
        }

        if(SpindleSpeedOverrideChanged){
            exec.SetModbusregister(55, 0); // Job's done!
            SpindleSpeedOverrideChanged = false;
        }
        
    //---- Feed Override ----//
        string Feed1 = AS3.Getfield(232);
        string Feed2 = Feed1.Substring(0, Feed1.Length-1);
        ushort FeedOverideInUCCNCField = Convert.ToUInt16(Feed2);
        bool FeedOverrideChanged = false;

        if(_Feed_Override_dir == 1){ // Negative direction
            AS3.Setfield((FeedOverideInUCCNCField - 10),232); // Remove ten to current field value
            AS3.Validatefield(232); // Validate entry
            FeedOverrideChanged = true;
        }

        if(_Feed_Override_dir == 2){ // Positive direction
            AS3.Setfield((FeedOverideInUCCNCField + 10),232); // Remove ten to current field value
            AS3.Validatefield(232); // Validate entry
            FeedOverrideChanged = true;
        }

        if(_Feed_Override_dir == 3){ // Encoder button clicked
            AS3.Setfield(100,232); // Set Feed Override to 100%
            AS3.Validatefield(232); // Validate entry
            FeedOverrideChanged = true;
        }

        if(FeedOverrideChanged){
            exec.SetModbusregister(57, 0); // Job's done!
            FeedOverrideChanged = false;
        }

    //---- Axis and scale select ----//
        if(HardMPG == 1){ // If Hard MPG is selected
            if(_MPG_Axis_Select == 1){exec.Callbutton(220);}
            if(_MPG_Axis_Select == 2){exec.Callbutton(221);}
            if(_MPG_Axis_Select == 3){exec.Callbutton(222);}
            if(_MPG_Axis_Select == 4){exec.Callbutton(225);}
            if(_MPG_Multiplication == 1){exec.Callbutton(20000);}
            if(_MPG_Multiplication == 2){exec.Callbutton(241);}
            if(_MPG_Multiplication == 3){exec.Callbutton(164);}
            if(_MPG_Multiplication == 4){exec.Callbutton(165);}
        }
    
        if((AS3jog.Getbuttonstate(241) == true) || (AS3jog.Getbuttonstate(164) == true) || (AS3jog.Getbuttonstate(165) == true)){AS3jog.Switchbutton(false, 20000);}
    //Thread.Sleep(50);
//}